version: "3.8"

services:
  auth-service:
    build:
      context: ./auth-service
    container_name: auth-service
    ports:
      - "8081:8081"
    environment:
      TWILIO_ACCOUNT_SID: some_account_sid
      TWILIO_AUTH_TOKEN: some_auth_token
      TWILIO_PHONE_NUMBER: some_phone_number
      TWILIO_USERNAME: some_username
      TWILIO_PATH_SERVICE_ID: some_path_service_id
      JWT_KEYSTORE_PASSWORD: "&*9iJ)(JK908"
      JWT_KEY_PASSWORD: (*7uj(7ujl
      JWT_KEYSTORE_LOCATION: ./auth-service/src/main/resources//jwtKeystore.jceks
      DB_URL: jdbc:postgresql://localhost:5432/authentication
      DB_USERNAME: postgres
      SPRING_PROFILES_ACTIVE: dev
    volumes:
      - ./auth-service/src/main/resources/:/app/resources/
    depends_on:
      - auth-db
      - redis
      - mailhog

  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    ports:
      - "1025:1025"
      - "8025:8025"

  product-db:
    image: mongo:6.0.7
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

  redis:
    image: redis:8.0.2
    container_name: redis
    ports:
      - "6379:6379"

  config-service:
    build:
      context: ./config-service
    container_name: config-service
    ports:
      - "8888:8888"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - redis

  gateway-service:
    build:
      context: ./gateway-service
    container_name: gateway-service
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - auth-service
      - product-service
      - order-service
      - payment-service
      - search-service
      - redis

  auth-db:
    image: postgres:16-alpine
    container_name: auth-db
    environment:
      POSTGRES_DB: authdb
      POSTGRES_USER: auth
      POSTGRES_PASSWORD: secret
    ports:
      - "5433:5432"

  product-service:
    build:
      context: ./product-service
    container_name: product-service
    ports:
      - "8084:8084"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://product-db:5432/productdb
      SPRING_DATASOURCE_USERNAME: product
      SPRING_DATASOURCE_PASSWORD: secret
    depends_on:
      - product-db

  order-service:
    build:
      context: ./order-service
    container_name: order-service
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://order-db:5432/orderdb
      SPRING_DATASOURCE_USERNAME: order
      SPRING_DATASOURCE_PASSWORD: secret
    depends_on:
      - order-db
      - redis

  order-db:
    image: postgres:16-alpine
    container_name: order-db
    environment:
      POSTGRES_DB: orderdb
      POSTGRES_USER: order
      POSTGRES_PASSWORD: secret
    ports:
      - "5435:5432"

  payment-service:
    build:
      context: ./payment-service
    container_name: payment-service
    ports:
      - "8083:8083"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://payment-db:5432/paymentdb
      SPRING_DATASOURCE_USERNAME: payment
      SPRING_DATASOURCE_PASSWORD: secret
    depends_on:
      - payment-db
      - redis

  payment-db:
    image: postgres:16-alpine
    container_name: payment-db
    environment:
      POSTGRES_DB: paymentdb
      POSTGRES_USER: payment
      POSTGRES_PASSWORD: secret
    ports:
      - "5436:5432"

  search-service:
    build:
      context: ./search-service
    container_name: search-service
    ports:
      - "8085:8085"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_ELASTICSEARCH_URIS: http://elasticsearch:9200
    depends_on:
      - redis
      - elasticsearch

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:0.9.0
    container_name: es-local-dev
    volumes:
      - dev-elasticsearch:/usr/share/elasticsearch/data
    ports:
      - "127.0.0.1:9200:9200"
    environment:
      - discovery.type=single-node
      - ELASTIC_PASSWORD=mbA7Gyk9
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=false
      - xpack.license.self_generated.type=trial
      - xpack.ml.use_auto_machine_memory_percent=true
      - ES_JAVA_OPTS=-Xms128m -Xmx2g
      - cluster.routing.allocation.disk.watermark.low=1gb
      - cluster.routing.allocation.disk.watermark.high=1gb
      - cluster.routing.allocation.disk.watermark.flood_stage=1gb
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: [ "CMD-SHELL",
              "curl --output /dev/null --silent --head --fail -u elastic:mbA7Gyk9 http://elasticsearch:9200", ]
      interval: 10s
      timeout: 10s
      retries: 30

  kibana_settings:
    depends_on:
      elasticsearch:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:0.9.0
    container_name: kibana_settings
    restart: 'no'
    command: >
      bash -c '
        echo "Setup the kibana_system password";
        start_time=$$(date +%s);
        timeout=60;
        until curl -s -u "elastic:mbA7Gyk9" -X POST http://elasticsearch:9200/_security/user/kibana_system/_password -d "{\"password\":\"QryBApDd\"}" -H "Content-Type: application/json" | grep -q "^{}"; do
          if [ $$(($$(date +%s) - $$start_time)) -ge $$timeout ]; then
            echo "Error: Elasticsearch timeout";
            exit 1;
          fi;
          sleep 2;
        done;
      '

  kibana:
    depends_on:
      kibana_settings:
        condition: service_completed_successfully
    image: docker.elastic.co/kibana/kibana:0.9.0
    container_name: kibana-local-dev
    volumes:
      - dev-kibana:/usr/share/kibana/data
      - ./config/telemetry.yml:/usr/share/kibana/config/telemetry.yml
    ports:
      - "127.0.0.1:5601:5601"
    environment:
      - SERVER_NAME=kibana
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=QryBApDd
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${KIBANA_ENCRYPTION_KEY}
      - ELASTICSEARCH_PUBLICBASEURL=http://localhost:9200
    healthcheck:
      test: [ "CMD-SHELL",
              "curl -s -I http://kibana:5601 | grep -q 'HTTP/1.1 302 Found'", ]
      interval: 10s
      timeout: 10s
      retries: 30

volumes:
  dev-elasticsearch:
  dev-kibana:
  es_data:
    driver: local