services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker-init/init-postgres.sh:/docker-entrypoint-initdb.d/init-postgres.sh
    command: postgres -c wal_level=logical
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  mailhog:
    image: mailhog/mailhog

  kafka:
    image: bitnami/kafka:4.0.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:29092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:29092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_OPTS=-Djava.security.auth.login.config=/opt/bitnami/kafka/config/kafka_jaas.conf
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
    volumes:
      - ./kafka_jaas.conf:/opt/bitnami/kafka/config/kafka_jaas.conf
    healthcheck:
      test: [ "CMD-SHELL", "/opt/bitnami/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server localhost:9092 || exit 1" ]
      timeout: 10s
      retries: 3

  zookeeper:
    image: bitnami/zookeeper:3.9.3
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOO_4LW_COMMANDS_WHITELIST: ruok,stat,conf,mntr
      ZOO_ENABLE_AUTH: "yes"
      ZOO_SERVER_USERS: ${ZOOKEEPER_SERVER_USER}
      ZOO_SERVER_PASSWORDS: ${ZOOKEEPER_SERVER_PASSWORD}
      ZOO_CLIENT_USER: ${ZOOKEEPER_CLIENT_USER}
      ZOO_CLIENT_PASSWORD: ${ZOOKEEPER_CLIENT_PASSWORD}

  connect:
    image: debezium/connect:2.6
    container_name: connect
    depends_on:
      - kafka
      - postgres
      - mongo
    ports:
      - "18083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      STATUS_STORAGE_TOPIC: connect_statuses
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      ALLOW_ANONYMOUS_LOGIN: yes


  mongo:
    image: mongo:6
    container_name: mongo
    command: [ "--replSet", "rs0", "--bind_ip_all", "--port", "27017" ]
    volumes:
      - mongo-data:/data/db
    ports:
      - "27017:27017"
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'mongo:27017'}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30

  redis:
    image: redislabs/rebloom:latest
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 3s
      retries: 1

  elasticsearch:
    image: elasticsearch:${ES_LOCAL_VERSION}
    container_name: elastic-search
    volumes:
      - es-data:/usr/share/elasticsearch/data
    ports:
      - 127.0.0.1:${ES_LOCAL_PORT}:9200
    environment:
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ES_LOCAL_PASSWORD}
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=false
      - xpack.license.self_generated.type=trial
      - xpack.ml.use_auto_machine_memory_percent=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: [ "CMD-SHELL",
              "curl --output /dev/null --silent --head --fail -u elastic:c9QobvxH http://elasticsearch:9200", ]
      interval: 10s
      retries: 3

  # --- CORE SERVICES ---
  registry-service:
    build: ./registery-service
    image: registry-service
    container_name: registry-service
    ports:
      - "8761:8761"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 30

  # --- APPLICATION MICROSERVICES ---
  auth-service:
    build:
      context: ./auth-service
      args:
        GRADLE_USER_HOME: /root/.gradle-auth
    container_name: auth-service
    image: auth-service
    depends_on:
      postgres: { condition: service_healthy }
      registry-service:
        condition: service_healthy
      redis: { condition: service_healthy }
    environment:
      DB_USERNAME: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: auth_db
      DB_PORT: 5432
      DB_HOST: postgres
      MAIL_HOST: mailhog
      REDIS_HOST: redis
      EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE: http://registry-service:8761/eureka # CORRECTED: URL and Variable Name
      JWT_KEYSTORE_LOCATION: keystore.jks
      JWT_KEYSTORE_PASSWORD: ${JWT_KEYSTORE_PASSWORD}
      JWT_KEY_PASSWORD: ${JWT_KEY_PASSWORD}
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      TWILIO_PATH_SERVICE_ID: ${TWILIO_PATH_SERVICE_ID}
    ports:
      - "8081:8081"

  product-service:
    build:
      context: ./product-service
      args:
        GRADLE_USER_HOME: /root/.gradle-product
    container_name: product-service
    image: product-service
    depends_on:
      - mongo
      - registry-service
      - connect
      - redis
    environment:
      spring.data.mongodb.uri: mongodb://mongo:27017/products
      KAFKA_HOST: kafka
      eureka.client.service-url.defaultZone: http://registry-service:8761/eureka
      JWT_KEYSTORE_LOCATION: ${JWT_KEYSTORE_LOCATION}
      JWT_KEYSTORE_PASSWORD: ${JWT_KEYSTORE_PASSWORD}
      JWT_KEY_PASSWORD: ${JWT_KEY_PASSWORD}
      REDIS_HOST: redis
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      TWILIO_PATH_SERVICE_ID: ${TWILIO_PATH_SERVICE_ID}
    ports:
      - "8084:8084"
      - "9090:9090"

  order-service:
    build:
      context: ./order-service
      args:
        GRADLE_USER_HOME: /root/.gradle-order
    container_name: order-service
    image: order-service
    depends_on:
      postgres: { condition: service_healthy }
      registry-service: { condition: service_healthy }
      connect:
        condition: service_started
    environment:
      DB_USERNAME: ${POSTGRES_USER}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: order_db
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_KEYSTORE_LOCATION: ${JWT_KEYSTORE_LOCATION}
      JWT_KEYSTORE_PASSWORD: ${JWT_KEYSTORE_PASSWORD}
      JWT_KEY_PASSWORD: ${JWT_KEY_PASSWORD}
      product-service.name: dns:///product-service:9090
      EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE: http://registry-service:8761/eureka
    ports:
      - "8082:8082"

  payment-service:
    build:
      context: ./payment-service
      args:
        GRADLE_USER_HOME: /root/.gradle-payment
    container_name: payment-service
    image: payment-service
    depends_on:
      postgres: { condition: service_healthy }
      registry-service: { condition: service_started }
      connect:
        condition: service_started
    environment:
      DB_USERNAME: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: payment_db
      KAFKA_HOST: kafka
      KAFKA_PORT: 9092
      DB_HOST: postgres
      DB_PORT: 5432
      JWT_KEYSTORE_LOCATION: ${JWT_KEYSTORE_LOCATION}
      JWT_KEYSTORE_PASSWORD: ${JWT_KEYSTORE_PASSWORD}
      JWT_KEY_PASSWORD: ${JWT_KEY_PASSWORD}
      EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE: http://registry-service:8761/eureka
      RAZORPAY_KEY_ID: ${RAZORPAY_KEY_ID}
      RAZORPAY_SECRET_KEY: ${RAZORPAY_KEY_SECRET}
      WEBHOOK_SECRET: ${WEBHOOK_SECRET}
    ports:
      - "8083:8083"

  search-service:
    build:
      context: ./search-service
      args:
        GRADLE_USER_HOME: /root/.gradle-search
    container_name: search-service
    image: search-service
    depends_on:
      elasticsearch:
        condition: service_healthy
      registry-service:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      spring.elasticsearch.uris: http://elasticsearch:9200
      ELASTICSEARCH_USERNAME: ${ELASTICSEARCH_USERNAME}
      ELASTICSEARCH_PASSWORD: ${ELASTICSEARCH_PASSWORD}
      KAFKA_HOST: kafka
      ELASTICSEARCH_PORT: 9200
      ELASTICSEARCH_HOST: elasticsearch
      EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE: http://registry-service:8761/eureka
    ports:
      - "8085:8085"

  gateway-service:
    build:
      context: ./gateway-service
      args:
        GRADLE_USER_HOME: /root/.gradle-gateway
    container_name: gateway-service
    image: gateway-service
    depends_on:
      - registry-service
    ports:
      - "8080:8080"
    environment:
      spring.data.redis.host: redis
      EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE: http://registry-service:8761/eureka # CORRECTED: URL and Variable Name

volumes:
  postgres-data:
  mongo-data:
  es-data:

x-buildkit: &buildkit
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1