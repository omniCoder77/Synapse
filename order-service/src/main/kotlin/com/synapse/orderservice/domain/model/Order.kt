package com.synapse.orderservice.domain.model

import com.synapse.orderservice.infrastructure.output.persistence.jpa.entity.AddressEmbeddable
import java.time.Instant
import java.util.*

data class Order(
    val id: OrderId = OrderId(UUID.randomUUID().toString()),
    val userId: UserId,
    val status: OrderStatus,
    val items: List<OrderItem>,
    val pricing: OrderPricing,
    val shippingAddress: Address,
    val billingAddress: Address = shippingAddress,
    val paymentMethod: PaymentMethod,
    val paymentStatus: PaymentStatus = PaymentStatus.PENDING,
    val trackingId: TrackingId = TrackingId(
        UUID.randomUUID().toString()
    ), // in reality this would be generated by a shipping provider
    val createdAt: Instant = Instant.now(),
    val updatedAt: Instant = Instant.now(),
    val metadata: OrderMetadata = OrderMetadata()
) {
    fun cancel(): Order = copy(
        status = OrderStatus.CANCELLED, updatedAt = Instant.now()
    )

    init {
        require(items.isNotEmpty()) { "Order must have at least one item" }
        require(pricing.total.amount >= 0) { "Total must be non-negative" }
    }
}

@JvmInline
value class OrderId(val value: String)

@JvmInline
value class ProductId(val value: String)

@JvmInline
value class UserId(val value: String)

@JvmInline
value class TrackingId(val value: String)

data class OrderItem(
    val productId: ProductId,
    val name: String,
    val quantity: Int,
    val unitPrice: Money,
    val discount: Money = Money.ZERO,
    val tax: Money = Money.ZERO,
    val imageUrl: String? = null
) {
    init {
        require(quantity > 0) { "Quantity must be positive" }
    }
}

data class OrderPricing(
    val subtotal: Money,
    val tax: Money = Money.ZERO,
    val shippingCost: Money = Money.ZERO,
    val discount: Money = Money.ZERO,
    val total: Money = subtotal + tax + shippingCost - discount
)

data class Money(
    val amount: Double, val currency: String = "IN"
) {
    operator fun plus(other: Money): Money = copy(amount = amount + other.amount)
    operator fun minus(other: Money): Money = copy(amount = amount - other.amount)

    companion object {
        val ZERO = Money(0.0)
    }
}

data class Address(
    val street: String, val city: String, val state: String, val postalCode: String, val country: String
) {
    fun toEmbeddable(): AddressEmbeddable = AddressEmbeddable(
        street = street, city = city, state = state, postalCode = postalCode, country = country
    )
}

enum class PaymentStatus { PENDING, PAID, FAILED, REFUNDED }

data class OrderMetadata(
    val cartId: String? = null, val notes: String? = null, val customFields: Map<String, String> = emptyMap()
)