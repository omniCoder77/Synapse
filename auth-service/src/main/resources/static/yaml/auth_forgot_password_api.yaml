openapi: 3.0.0
info:
  title: Auth Password Reset API
  version: 1.0.0
  description: API for managing user password reset and recovery flows.
servers:
  - url: http://localhost:8080/auth
    description: Base URL for authentication endpoints
tags:
  - name: Password Reset
    description: Operations related to password recovery and setting new passwords.
paths:
  /forgot-password:
    post:
      summary: Initiate Password Reset
      operationId: initiatePasswordReset
      description: Sends a password reset link/token to the specified email address if an account exists.
      requestBody:
        description: Request to initiate password reset.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
            examples:
              example:
                summary: Initiate password reset
                value:
                  email: user@example.com
      responses:
        '202':
          description: Accepted. Indicates that if an account exists, a reset link has been sent. (Returns 200 OK with message in current code)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseSuccessString'
              examples:
                success:
                  summary: Reset link sent message
                  value:
                    status: SUCCESS
                    data: "If an account exists with this email, a reset link has been sent"
        '500':
          description: Internal server error.
  /validate-reset-token:
    post:
      summary: Validate Password Reset Token
      operationId: validateResetToken
      description: Validates a token sent to the user for password reset and provides a session token for the next step.
      requestBody:
        description: Request to validate the reset token.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateTokenRequest'
            examples:
              example:
                summary: Validate token example
                value:
                  email: user@example.com
                  token: your-received-token-string
      responses:
        '200':
          description: Token successfully validated. Returns session token and MFA requirement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsePasswordResetResponse'
              examples:
                successNoMfa:
                  summary: Valid token, no MFA
                  value:
                    status: SUCCESS
                    data:
                      mfaRequired: false
                      sessionToken: some-session-token
                successMfaRequired:
                  summary: Valid token, MFA required
                  value:
                    status: SUCCESS
                    data:
                      mfaRequired: true
                      sessionToken: another-session-token
        '400':
          description: Invalid or expired token, or invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseError'
              examples:
                invalidToken:
                  summary: Invalid token
                  value:
                    status: ERROR
                    message: "Invalid or expired token"
        '404':
          description: User not found (if `EntityNotFoundException` is rethrown as 404).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseError'
              examples:
                userNotFound:
                  summary: User not found
                  value:
                    status: ERROR
                    message: "User not found"
        '500':
          description: Internal server error.
  /verify-mfa-password:
    post:
      summary: Verify MFA for Password Reset
      operationId: verifyMfaForPasswordReset
      description: Verifies the MFA code during a password reset flow, if MFA is required.
      parameters:
        - name: code
          in: query
          description: The 6-digit TOTP code from the authenticator app.
          required: true
          schema:
            type: string
            pattern: '^\d{6}$'
          example: "123456"
        - name: Authorization
          in: header
          description: The session token obtained from `/validate-reset-token` endpoint. Should be prefixed with `Bearer `.
          required: true
          schema:
            type: string
            example: Bearer some-session-token-string
      responses:
        '200':
          description: MFA successfully verified. Returns a token for the final password reset step.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsePasswordResetTokenResponse'
              examples:
                success:
                  summary: MFA verification success
                  value:
                    status: SUCCESS
                    data:
                      resetToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          description: Invalid MFA code.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseError'
              examples:
                invalidCode:
                  summary: Invalid MFA code
                  value:
                    status: ERROR
                    message: "Invalid MFA code"
        '401':
          description: Unauthorized - Invalid session token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseError'
              examples:
                invalidSession:
                  summary: Invalid session
                  value:
                    status: ERROR
                    message: "Invalid session"
        '412': # PRECONDITION_FAILED
          description: MFA not configured for the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseError'
              examples:
                mfaNotConfigured:
                  summary: MFA not configured
                  value:
                    status: ERROR
                    message: "MFA not configured for this user"
        '429': # TOO_MANY_REQUESTS
          description: Too many MFA attempts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseError'
              examples:
                tooManyAttempts:
                  summary: Too many attempts
                  value:
                    status: ERROR
                    message: "Too many attempts. Please try again later."
        '500':
          description: Internal server error.
  /reset-password:
    post:
      summary: Reset Password
      operationId: resetPassword
      description: Sets a new password for the user after successful token and MFA (if required) verification.
      parameters:
        - name: Authorization
          in: header
          description: The reset token obtained from `/verify-mfa-password` (if MFA was required) or from `/forgot-password` (if no MFA). Should be prefixed with `Bearer `.
          required: true
          schema:
            type: string
            example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      requestBody:
        description: Request to set the new password.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPasswordRequest'
            examples:
              example:
                summary: New password request
                value:
                  newPassword: NewSecurePassword123!
                  confirmPassword: NewSecurePassword123!
      responses:
        '200':
          description: Password successfully reset.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseSuccessString'
              examples:
                success:
                  summary: Password reset success
                  value:
                    status: SUCCESS
                    data: "Password successfully reset"
        '400':
          description: Bad request - Passwords do not match, or user not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseError'
              examples:
                passwordsMismatch:
                  summary: Passwords mismatch
                  value:
                    status: ERROR
                    message: "Passwords do not match"
                userNotFound:
                  summary: User not found
                  value:
                    status: ERROR
                    message: "User not found"
        '401':
          description: Unauthorized - Invalid or expired reset token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseError'
              examples:
                invalidToken:
                  summary: Invalid token
                  value:
                    status: ERROR
                    message: "Invalid or expired token"
        '403':
          description: Forbidden - MFA verification required but not completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseError'
              examples:
                mfaRequired:
                  summary: MFA required
                  value:
                    status: ERROR
                    message: "MFA verification required"
        '500':
          description: Internal server error.
components:
  schemas:
    PasswordResetRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: The email address for which to initiate password reset.
          example: user@example.com
    ValidateTokenRequest:
      type: object
      required:
        - email
        - token
      properties:
        email:
          type: string
          format: email
          description: The user's email address.
          example: user@example.com
        token:
          type: string
          description: The secure token received for password reset.
          example: your-received-token-string
    NewPasswordRequest:
      type: object
      required:
        - newPassword
        - confirmPassword
      properties:
        newPassword:
          type: string
          format: password
          description: The new password for the user.
          minLength: 8
          example: NewSecurePassword123!
        confirmPassword:
          type: string
          format: password
          description: Confirmation of the new password. Must match `newPassword`.
          minLength: 8
          example: NewSecurePassword123!
    PasswordResetResponse:
      type: object
      properties:
        mfaRequired:
          type: boolean
          description: Indicates if Multi-Factor Authentication is required for the user to proceed.
          example: true
        sessionToken:
          type: string
          nullable: true
          description: A temporary session token to be used in subsequent MFA verification or password reset steps.
          example: some-session-token
        resetToken:
          type: string
          nullable: true
          description: "An optional reset token. (Note: In the code, this isn't directly returned here but after MFA verification)"
        mfaTypes:
          type: array
          items:
            type: string
          nullable: true
          description: List of MFA types configured for the user (e.g., ["TOTP"]).
    PasswordResetTokenResponse:
      type: object
      properties:
        resetToken:
          type: string
          description: The final reset token to be used when setting the new password.
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      required:
        - resetToken
    ApiResponse:
      type: object
      discriminator:
        propertyName: status
        mapping:
          SUCCESS: '#/components/schemas/ApiResponseSuccess'
          ERROR: '#/components/schemas/ApiResponseError'
    ApiResponseSuccess:
      type: object
      properties:
        status:
          type: string
          enum: [ "SUCCESS" ]
        data:
          type: object # Can be string, PasswordResetResponse, or PasswordResetTokenResponse
      required:
        - status
        - data
    ApiResponseError:
      type: object
      properties:
        status:
          type: string
          enum: [ "ERROR" ]
        message:
          type: string
          description: Error message details.
      required:
        - status
        - message
    ApiResponseSuccessString:
      allOf:
        - $ref: '#/components/schemas/ApiResponseSuccess'
        - properties:
            data:
              type: string
    ApiResponsePasswordResetResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponseSuccess'
        - properties:
            data:
              $ref: '#/components/schemas/PasswordResetResponse'
    ApiResponsePasswordResetTokenResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponseSuccess'
        - properties:
            data:
              $ref: '#/components/schemas/PasswordResetTokenResponse'