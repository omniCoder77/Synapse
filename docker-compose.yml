services:
  # --- INFRASTRUCTURE ---
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker-init/init-postgres.sh:/docker-entrypoint-initdb.d/init-postgres.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  elasticsearch:
    image: elasticsearch:8.11.3
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true # Enable security for production
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD}
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - es-data:/usr/share/elasticsearch/data

  # --- CORE SERVICES ---
  registery-service:
    build: ./registery-service
    container_name: registery-service
    ports:
      - "8761:8761"

  config-server:
    build: ./config-server
    container_name: config-server
    ports:
      - "8888:8888"
    environment:
      REDIS_HOST: redis

  # --- APPLICATION MICROSERVICES ---
  auth-service:
    build: ./auth-service
    container_name: auth-service
    depends_on:
      postgres: { condition: service_healthy }
    environment:
      DB_URL: r2dbc:postgresql://postgres:5432/auth_db
      DB_USERNAME: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_HOST: redis
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://registery-service:8761/eureka
      JWT_KEYSTORE_LOCATION: keystore.jks # Path inside the container
      JWT_KEYSTORE_PASSWORD: ${JWT_KEYSTORE_PASSWORD}
      JWT_KEY_PASSWORD: ${JWT_KEY_PASSWORD}
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      TWILIO_PATH_SERVICE_ID: ${TWILIO_PATH_SERVICE_ID}
    ports:
      - "8081:8081"

  product-service:
    build: ./product-service
    container_name: product-service
    depends_on:
      - mongo
      - registery-service
    environment:
      spring.data.mongodb.uri: mongodb://mongo:27017/products
      KAFKA_HOST: kafka
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://registery-service:8761/eureka
      JWT_KEYSTORE_LOCATION: keystore.jks # Path inside the container
      JWT_KEYSTORE_PASSWORD: ${JWT_KEYSTORE_PASSWORD}
      JWT_KEY_PASSWORD: ${JWT_KEY_PASSWORD}
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      TWILIO_PATH_SERVICE_ID: ${TWILIO_PATH_SERVICE_ID}
    ports:
      - "8084:8084"
      - "9090:9090"

  order-service:
    build: ./order-service
    container_name: order-service
    depends_on:
      postgres: { condition: service_healthy }
      product-service: { condition: service_started }
      registery-service: { condition: service_started }
    environment:
      DB_URL: jdbc:postgresql://postgres:5432/order_db
      DB_USERNAME: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      product-service.name: dns:///product-service:9090
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://registery-service:8761/eureka
    ports:
      - "8082:8082"

  payment-service:
    build: ./payment-service
    container_name: payment-service
    depends_on:
      postgres: { condition: service_healthy }
      registery-service: { condition: service_started }
    environment:
      spring.datasource.url: jdbc:postgresql://postgres:5432/payment
      spring.datasource.username: ${POSTGRES_USER}
      spring.datasource.password: ${POSTGRES_PASSWORD}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://registery-service:8761/eureka
      RAZORPAY_KEY_ID: ${RAZORPAY_KEY_ID}
      RAZORPAY_SECRET_KEY: ${RAZORPAY_KEY_SECRET}
      WEBHOOK_SECRET: ${WEBHOOK_SECRET}
    ports:
      - "8083:8083"

  search-service:
    build: ./search-service
    container_name: search-service
    depends_on:
      - elasticsearch
      - registery-service
    environment:
      spring.elasticsearch.uris: http://elasticsearch:9200
      ELASTICSEARCH_USERNAME: ${ELASTICSEARCH_USERNAME}
      ELASTICSEARCH_PASSWORD: ${ELASTICSEARCH_PASSWORD}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://registery-service:8761/eureka
    ports:
      - "8085:8085"

  gateway-service:
    build: ./gateway-service
    container_name: gateway-service
    depends_on:
      - registery-service
    ports:
      - "8080:8080"
    environment:
      spring.data.redis.host: redis
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://registery-service:8761/eureka

# Named volumes to persist data across container restarts
volumes:
  postgres-data:
  mongo-data:
  es-data: